env JWT_SECRET;
env JWT_POST_SECRET;

worker_processes 1;

events { worker_connections 1024; }

http {
    sendfile on;
    lua_package_path '/opt/openresty/nginx/lua/?.lua;;';

    init_by_lua '
  jwt = require("nginx-jwt")
  ngx.log(ngx.INFO,"Starting...")
  if jwt == nil then
    ngx.log(ngx.WARN,"JWT is NIL")
  end
    ';

    log_format  main  '$remote_addr - $lua_remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent $upstream_connect_time $upstream_header_time '
                      '$upstream_response_time $upstream_response_time "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" $azp $cap_token $act';
    access_log /var/nginx/access.log  main;

    include /opt/openresty/nginx/conf/metricbeat.conf;

    server {
        listen 80;
        client_max_body_size 20000M;
        proxy_send_timeout      120;
        proxy_read_timeout      120;
        proxy_request_buffering off;
        proxy_buffering         off;
        proxy_http_version      1.1;
        proxy_max_temp_file_size  0;
        set $azp '-';
        set $act '-';
        set $cap_token '-';
        set $lua_remote_user '-';
        set $pacs_bearer_access_token '-';
        lua_ssl_verify_depth 2;
        lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.pem;
        resolver 8.8.8.8 ipv6=off;


        location = /wado {
            access_by_lua '
                if ngx.var.request_method == "GET" then
                   if ngx.var.arg_studyUID == nil then
                      ngx.log(ngx.WARN,"studyUID: missing")
                      ngx.exit(ngx.HTTP_BAD_REQUEST)
                   end
                   if ngx.var.arg_seriesUID == nil then
                      ngx.log(ngx.WARN,"seriesUID: missing")
                      ngx.exit(ngx.HTTP_BAD_REQUEST)
                   end
                   local jwt = require("nginx-jwt")
                   jwt.auth({
                      study_uid="^"..string.gsub(ngx.var.arg_studyUID, "%.", "%.").."$",
                      series_uid="^"..string.gsub(ngx.var.arg_seriesUID, "%.", "%.").."$"
                    }, false)
                else
                    ngx.header["Allow"] = "GET"
                    ngx.exit(ngx.HTTP_NOT_ALLOWED)
                end
            ';
            proxy_set_header Authorization $pacs_bearer_access_token;
            proxy_pass ${pacs_wado_uri};
        }

        location = /studies {
            access_by_lua '
                if ngx.var.request_method == "POST" then
                   --local jwt = require("nginx-jwt")
                   jwt.auth({}, true)
                elseif ngx.var.request_method == "GET" then
                   --local jwt = require("nginx-jwt")
                   jwt.auth({
                      study_uid="^"..string.gsub(ngx.var.arg_StudyInstanceUID, "%.", "%.").."$",
                      series_uid="^all_access$"
                   }, false)

                else
                   ngx.header["Allow"] = "GET, POST"
                   ngx.exit(ngx.HTTP_NOT_ALLOWED)
                end
            ';
            proxy_set_header Authorization $pacs_bearer_access_token;
            proxy_pass ${pacs_wado_rs}/studies$is_args$args;
        }

        location ~ ^/studies/([0-9.]+)$ {
            access_by_lua '
                if ngx.var.request_method == "POST" then
                    --local jwt = require("nginx-jwt")
                    jwt.auth({
                        study_uid="^"..string.gsub(ngx.var[1], "%.", "%.").."$",
                     }, true)
                else
                   ngx.header["Allow"] = "POST"
                   ngx.exit(ngx.HTTP_NOT_ALLOWED)
                end
            ';
            proxy_set_header Authorization $pacs_bearer_access_token;
            proxy_pass ${pacs_wado_rs}/studies/$1;
        }

        location ~ ^/studies/([0-9.]+)/(metadata|instances)$ {
            access_by_lua '
               if ngx.var.request_method == "GET" then
                  local jwt = require("nginx-jwt")
                  jwt.auth({
                     study_uid="^"..string.gsub(ngx.var[1], "%.", "%.").."$",
                     series_uid="^all_access$"
                  }, false)
               else
                  ngx.header["Allow"] = "GET"
                  ngx.exit(ngx.HTTP_NOT_ALLOWED)
               end
            ';
            proxy_set_header Authorization $pacs_bearer_access_token;
            proxy_pass ${pacs_wado_rs}/studies/$1/$2;
        }

        location ~ ^/studies/([0-9.]+)/series$ {
            access_by_lua '
               local function checkJWTSeriesUID(val)
                  return string.match(val, "all_access") ~= nil or string.match(val, ngx.var.arg_SeriesInstanceUID) ~= nil
               end
               if ngx.var.request_method == "GET" then
                  local jwt = require("nginx-jwt")
                  if ngx.var.arg_SeriesInstanceUID == nil then
                     jwt.auth({
                        study_uid="^"..string.gsub(ngx.var[1], "%.", "%.").."$",
                        series_uid="^all_access$"
                     }, false)
                  else
                     jwt.auth({
                        study_uid="^"..string.gsub(ngx.var[1], "%.", "%.").."$",
                        series_uid=checkJWTSeriesUID
                     }, false)
                  end
               else
                  ngx.header["Allow"] = "GET"
                  ngx.exit(ngx.HTTP_NOT_ALLOWED)
               end
            ';
            proxy_set_header Authorization $pacs_bearer_access_token;
            proxy_pass ${pacs_wado_rs}/studies/$1/series$is_args$args;
        }

        location ~ ^/studies/([0-9.]+)/series/([0-9.]+)(.*)$ {
            access_by_lua '
                if ngx.var.request_method == "GET" or ngx.var.request_method == "POST" then
                   local jwt = require("nginx-jwt")
                   jwt.auth({
                      study_uid="^"..string.gsub(ngx.var[1], "%.", "%.").."$",
                      series_uid="^"..string.gsub(ngx.var[2], "%.", "%.").."$"
                   }, false)
                else
                   ngx.header["Allow"] = "GET, POST"
                   ngx.exit(ngx.HTTP_NOT_ALLOWED)
                end
            ';
            proxy_set_header Authorization $pacs_bearer_access_token;
            proxy_pass ${pacs_wado_rs}/studies/$1/series/$2$3$is_args$args;
        }
    }
}
